{"version":3,"file":"avl.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["\r\n/**\r\n * Prints tree horizontally\r\n * @param  {Node}                       root\r\n * @param  {Function(node:Node):String} [printNode]\r\n * @return {String}\r\n */\r\nexport function print (root, printNode = (n) => n.key) {\r\n  var out = [];\r\n  row(root, '', true, (v) => out.push(v), printNode);\r\n  return out.join('');\r\n}\r\n\r\n/**\r\n * Prints level of the tree\r\n * @param  {Node}                        root\r\n * @param  {String}                      prefix\r\n * @param  {Boolean}                     isTail\r\n * @param  {Function(in:string):void}    out\r\n * @param  {Function(node:Node):String}  printNode\r\n */\r\nfunction row (root, prefix, isTail, out, printNode) {\r\n  if (root) {\r\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\r\n    const indent = prefix + (isTail ? '    ' : '│   ');\r\n    if (root.left)  row(root.left,  indent, false, out, printNode);\r\n    if (root.right) row(root.right, indent, true,  out, printNode);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Is the tree balanced (none of the subtrees differ in height by more than 1)\r\n * @param  {Node}    root\r\n * @return {Boolean}\r\n */\r\nexport function isBalanced(root) {\r\n  if (root === null) return true; // If node is empty then return true\r\n\r\n  // Get the height of left and right sub trees\r\n  var lh = height(root.left);\r\n  var rh = height(root.right);\r\n\r\n  if (Math.abs(lh - rh) <= 1 &&\r\n      isBalanced(root.left)  &&\r\n      isBalanced(root.right)) return true;\r\n\r\n  // If we reach here then tree is not height-balanced\r\n  return false;\r\n}\r\n\r\n/**\r\n * The function Compute the 'height' of a tree.\r\n * Height is the number of nodes along the longest path\r\n * from the root node down to the farthest leaf node.\r\n *\r\n * @param  {Node} node\r\n * @return {Number}\r\n */\r\nfunction height(node) {\r\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\r\n}\r\n\r\n\r\nexport function loadRecursive (parent, keys, values, start, end) {\r\n  const size = end - start;\r\n  if (size > 0) {\r\n    const middle = start + Math.floor(size / 2);\r\n    const key    = keys[middle];\r\n    const data   = values[middle];\r\n    const node   = { key, data, parent };\r\n    node.left    = loadRecursive(node, keys, values, start, middle);\r\n    node.right   = loadRecursive(node, keys, values, middle + 1, end);\r\n    return node;\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\nexport function markBalance(node) {\r\n  if (node === null) return 0;\r\n  const lh = markBalance(node.left);\r\n  const rh = markBalance(node.right);\r\n\r\n  node.balanceFactor = lh - rh;\r\n  return Math.max(lh, rh) + 1;\r\n}\r\n\r\n\r\nexport function sort(keys, values, left, right, compare) {\r\n  if (left >= right) return;\r\n\r\n  // eslint-disable-next-line no-bitwise\r\n  const pivot = keys[(left + right) >> 1];\r\n  let i = left - 1;\r\n  let j = right + 1;\r\n\r\n  // eslint-disable-next-line no-constant-condition\r\n  while (true) {\r\n    do i++; while (compare(keys[i], pivot) < 0);\r\n    do j--; while (compare(keys[j], pivot) > 0);\r\n    if (i >= j) break;\r\n\r\n    let tmp = keys[i];\r\n    keys[i] = keys[j];\r\n    keys[j] = tmp;\r\n\r\n    tmp = values[i];\r\n    values[i] = values[j];\r\n    values[j] = tmp;\r\n  }\r\n\r\n  sort(keys, values,  left,     j, compare);\r\n  sort(keys, values, j + 1, right, compare);\r\n}\r\n","import { print, isBalanced, loadRecursive, markBalance, sort } from \"./utils\";\r\n\r\n// function createNode (parent, left, right, height, key, data) {\r\n//   return { parent, left, right, balanceFactor: height, key, data };\r\n// }\r\n\r\n/**\r\n * @typedef {{\r\n *   parent:        ?Node,\r\n *   left:          ?Node,\r\n *   right:         ?Node,\r\n *   balanceFactor: number,\r\n *   key:           Key,\r\n *   data:          Value\r\n * }} Node\r\n */\r\n\r\n/**\r\n * @typedef {*} Key\r\n */\r\n\r\n/**\r\n * @typedef {*} Value\r\n */\r\n\r\n/**\r\n * Default comparison function\r\n * @param {Key} a\r\n * @param {Key} b\r\n * @returns {number}\r\n */\r\nfunction DEFAULT_COMPARE(a, b) {\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * Single left rotation\r\n * @param  {Node} node\r\n * @return {Node}\r\n */\r\nfunction rotateLeft(node) {\r\n  var rightNode = node.right;\r\n  node.right = rightNode.left;\r\n\r\n  if (rightNode.left) rightNode.left.parent = node;\r\n\r\n  rightNode.parent = node.parent;\r\n  if (rightNode.parent) {\r\n    if (rightNode.parent.left === node) {\r\n      rightNode.parent.left = rightNode;\r\n    } else {\r\n      rightNode.parent.right = rightNode;\r\n    }\r\n  }\r\n\r\n  node.parent = rightNode;\r\n  rightNode.left = node;\r\n\r\n  node.balanceFactor += 1;\r\n  if (rightNode.balanceFactor < 0) {\r\n    node.balanceFactor -= rightNode.balanceFactor;\r\n  }\r\n\r\n  rightNode.balanceFactor += 1;\r\n  if (node.balanceFactor > 0) {\r\n    rightNode.balanceFactor += node.balanceFactor;\r\n  }\r\n  return rightNode;\r\n}\r\n\r\nfunction rotateRight(node) {\r\n  var leftNode = node.left;\r\n  node.left = leftNode.right;\r\n  if (node.left) node.left.parent = node;\r\n\r\n  leftNode.parent = node.parent;\r\n  if (leftNode.parent) {\r\n    if (leftNode.parent.left === node) {\r\n      leftNode.parent.left = leftNode;\r\n    } else {\r\n      leftNode.parent.right = leftNode;\r\n    }\r\n  }\r\n\r\n  node.parent = leftNode;\r\n  leftNode.right = node;\r\n\r\n  node.balanceFactor -= 1;\r\n  if (leftNode.balanceFactor > 0) {\r\n    node.balanceFactor -= leftNode.balanceFactor;\r\n  }\r\n\r\n  leftNode.balanceFactor -= 1;\r\n  if (node.balanceFactor < 0) {\r\n    leftNode.balanceFactor += node.balanceFactor;\r\n  }\r\n\r\n  return leftNode;\r\n}\r\n\r\n// function leftBalance (node) {\r\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\r\n//   return rotateRight(node);\r\n// }\r\n\r\n// function rightBalance (node) {\r\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\r\n//   return rotateLeft(node);\r\n// }\r\n\r\nexport default class AVLTree {\r\n  /**\r\n   * Callback for comparator\r\n   * @callback comparatorCallback\r\n   * @param {Key} a\r\n   * @param {Key} b\r\n   * @returns {number}\r\n   */\r\n\r\n  /**\r\n   * @class AVLTree\r\n   * @constructor\r\n   * @param  {comparatorCallback} [comparator]\r\n   * @param  {boolean}            [noDuplicates=false] Disallow duplicates\r\n   */\r\n  constructor(comparator, noDuplicates = false) {\r\n    this._comparator = comparator || DEFAULT_COMPARE;\r\n    this._root = null;\r\n    this._size = 0;\r\n    this._noDuplicates = !!noDuplicates;\r\n  }\r\n\r\n  get comparator() {\r\n    return this._comparator;\r\n  }\r\n\r\n  /**\r\n   * Clear the tree\r\n   * @return {AVLTree}\r\n   */\r\n  destroy() {\r\n    return this.clear();\r\n  }\r\n\r\n  /**\r\n   * Clear the tree\r\n   * @return {AVLTree}\r\n   */\r\n  clear() {\r\n    this._root = null;\r\n    this._size = 0;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Number of nodes\r\n   * @return {number}\r\n   */\r\n  get size() {\r\n    return this._size;\r\n  }\r\n\r\n  /**\r\n   * Whether the tree contains a node with the given key\r\n   * @param  {Key} key\r\n   * @return {boolean} true/false\r\n   */\r\n  contains(key) {\r\n    if (this._root) {\r\n      var node = this._root;\r\n      var comparator = this._comparator;\r\n      while (node) {\r\n        var cmp = comparator(key, node.key);\r\n        if (cmp === 0) return true;\r\n        else if (cmp < 0) node = node.left;\r\n        else node = node.right;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable class-methods-use-this */\r\n\r\n  /**\r\n   * Successor node\r\n   * @param  {Node} node\r\n   * @return {?Node}\r\n   */\r\n  next(node) {\r\n    var successor = node;\r\n    if (successor) {\r\n      if (successor.right) {\r\n        successor = successor.right;\r\n        while (successor.left) successor = successor.left;\r\n      } else {\r\n        successor = node.parent;\r\n        while (successor && successor.right === node) {\r\n          node = successor;\r\n          successor = successor.parent;\r\n        }\r\n      }\r\n    }\r\n    return successor;\r\n  }\r\n\r\n  /**\r\n   * Predecessor node\r\n   * @param  {Node} node\r\n   * @return {?Node}\r\n   */\r\n  prev(node) {\r\n    var predecessor = node;\r\n    if (predecessor) {\r\n      if (predecessor.left) {\r\n        predecessor = predecessor.left;\r\n        while (predecessor.right) predecessor = predecessor.right;\r\n      } else {\r\n        predecessor = node.parent;\r\n        while (predecessor && predecessor.left === node) {\r\n          node = predecessor;\r\n          predecessor = predecessor.parent;\r\n        }\r\n      }\r\n    }\r\n    return predecessor;\r\n  }\r\n  /* eslint-enable class-methods-use-this */\r\n\r\n  /**\r\n   * Callback for forEach\r\n   * @callback forEachCallback\r\n   * @param {Node} node\r\n   * @param {number} index\r\n   */\r\n\r\n  /**\r\n   * @param  {forEachCallback} callback\r\n   * @return {AVLTree}\r\n   */\r\n  forEach(callback) {\r\n    var current = this._root;\r\n    var s = [],\r\n      done = false,\r\n      i = 0;\r\n\r\n    while (!done) {\r\n      // Reach the left most Node of the current Node\r\n      if (current) {\r\n        // Place pointer to a tree node on the stack\r\n        // before traversing the node's left subtree\r\n        s.push(current);\r\n        current = current.left;\r\n      } else {\r\n        // BackTrack from the empty subtree and visit the Node\r\n        // at the top of the stack; however, if the stack is\r\n        // empty you are done\r\n        if (s.length > 0) {\r\n          current = s.pop();\r\n          callback(current, i++);\r\n\r\n          // We have visited the node and its left\r\n          // subtree. Now, it's right subtree's turn\r\n          current = current.right;\r\n        } else done = true;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Walk key range from `low` to `high`. Stops if `fn` returns a value.\r\n   * @param  {Key}      low\r\n   * @param  {Key}      high\r\n   * @param  {Function} fn\r\n   * @param  {*?}       ctx\r\n   * @return {SplayTree}\r\n   */\r\n  range(low, high, fn, ctx) {\r\n    const Q = [];\r\n    const compare = this._comparator;\r\n    let node = this._root,\r\n      cmp;\r\n\r\n    while (Q.length !== 0 || node) {\r\n      if (node) {\r\n        Q.push(node);\r\n        node = node.left;\r\n      } else {\r\n        node = Q.pop();\r\n        cmp = compare(node.key, high);\r\n        if (cmp > 0) {\r\n          break;\r\n        } else if (compare(node.key, low) >= 0) {\r\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\r\n        }\r\n        node = node.right;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Walk key range from `high` to `low`. Stops if `fn` returns a value.\r\n   * @param  {Key}      high\r\n   * @param  {Key}      low\r\n   * @param  {Function} fn\r\n   * @param  {*?}       ctx\r\n   * @return {SplayTree}\r\n   */\r\n  rangeRev(high, low, fn, ctx) {\r\n    const Q = [];\r\n    const compare = this._comparator;\r\n    let node = this._root,\r\n      cmp;\r\n\r\n    while (Q.length !== 0 || node) {\r\n      if (node) {\r\n        Q.push(node);\r\n        node = node.right;\r\n      } else {\r\n        node = Q.pop();\r\n        cmp = compare(node.key, low);\r\n        if (cmp < 0) {\r\n          break;\r\n        } else if (compare(node.key, high) <= 0) {\r\n          if (fn.call(ctx, node)) return this; // stop if smth is returned\r\n        }\r\n        node = node.left;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns all keys in order\r\n   * @return {Array<Key>}\r\n   */\r\n  keys() {\r\n    var current = this._root;\r\n    var s = [],\r\n      r = [],\r\n      done = false;\r\n\r\n    while (!done) {\r\n      if (current) {\r\n        s.push(current);\r\n        current = current.left;\r\n      } else {\r\n        if (s.length > 0) {\r\n          current = s.pop();\r\n          r.push(current.key);\r\n          current = current.right;\r\n        } else done = true;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Returns `data` fields of all nodes in order.\r\n   * @return {Array<Value>}\r\n   */\r\n  values() {\r\n    var current = this._root;\r\n    var s = [],\r\n      r = [],\r\n      done = false;\r\n\r\n    while (!done) {\r\n      if (current) {\r\n        s.push(current);\r\n        current = current.left;\r\n      } else {\r\n        if (s.length > 0) {\r\n          current = s.pop();\r\n          r.push(current.data);\r\n          current = current.right;\r\n        } else done = true;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Returns node at given index\r\n   * @param  {number} index\r\n   * @return {?Node}\r\n   */\r\n  at(index) {\r\n    // removed after a consideration, more misleading than useful\r\n    // index = index % this.size;\r\n    // if (index < 0) index = this.size - index;\r\n\r\n    var current = this._root;\r\n    var s = [],\r\n      done = false,\r\n      i = 0;\r\n\r\n    while (!done) {\r\n      if (current) {\r\n        s.push(current);\r\n        current = current.left;\r\n      } else {\r\n        if (s.length > 0) {\r\n          current = s.pop();\r\n          if (i === index) return current;\r\n          i++;\r\n          current = current.right;\r\n        } else done = true;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Returns node with the minimum key\r\n   * @return {?Node}\r\n   */\r\n  minNode() {\r\n    var node = this._root;\r\n    if (!node) return null;\r\n    while (node.left) node = node.left;\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Returns node with the max key\r\n   * @return {?Node}\r\n   */\r\n  maxNode() {\r\n    var node = this._root;\r\n    if (!node) return null;\r\n    while (node.right) node = node.right;\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Min key\r\n   * @return {?Key}\r\n   */\r\n  min() {\r\n    var node = this._root;\r\n    if (!node) return null;\r\n    while (node.left) node = node.left;\r\n    return node.key;\r\n  }\r\n\r\n  /**\r\n   * Max key\r\n   * @return {?Key}\r\n   */\r\n  max() {\r\n    var node = this._root;\r\n    if (!node) return null;\r\n    while (node.right) node = node.right;\r\n    return node.key;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} true/false\r\n   */\r\n  isEmpty() {\r\n    return !this._root;\r\n  }\r\n\r\n  /**\r\n   * Removes and returns the node with smallest key\r\n   * @return {?Node}\r\n   */\r\n  pop() {\r\n    var node = this._root,\r\n      returnValue = null;\r\n    if (node) {\r\n      while (node.left) node = node.left;\r\n      returnValue = { key: node.key, data: node.data };\r\n      this.remove(node.key);\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Removes and returns the node with highest key\r\n   * @return {?Node}\r\n   */\r\n  popMax() {\r\n    var node = this._root,\r\n      returnValue = null;\r\n    if (node) {\r\n      while (node.right) node = node.right;\r\n      returnValue = { key: node.key, data: node.data };\r\n      this.remove(node.key);\r\n    }\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Find node by key\r\n   * @param  {Key} key\r\n   * @return {?Node}\r\n   */\r\n  find(key) {\r\n    var root = this._root;\r\n    // if (root === null)    return null;\r\n    // if (key === root.key) return root;\r\n\r\n    var subtree = root,\r\n      cmp;\r\n    var compare = this._comparator;\r\n    while (subtree) {\r\n      cmp = compare(key, subtree.key);\r\n      if (cmp === 0) return subtree;\r\n      else if (cmp < 0) subtree = subtree.left;\r\n      else subtree = subtree.right;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Insert a node into the tree\r\n   * @param  {Key} key\r\n   * @param  {Value} [data]\r\n   * @return {?Node}\r\n   */\r\n  insert(key, data) {\r\n    if (!this._root) {\r\n      this._root = {\r\n        parent: null,\r\n        left: null,\r\n        right: null,\r\n        balanceFactor: 0,\r\n        key,\r\n        data,\r\n      };\r\n      this._size++;\r\n      return this._root;\r\n    }\r\n\r\n    var compare = this._comparator;\r\n    var node = this._root;\r\n    var parent = null;\r\n    var cmp = 0;\r\n\r\n    if (this._noDuplicates) {\r\n      while (node) {\r\n        cmp = compare(key, node.key);\r\n        parent = node;\r\n        if (cmp === 0) return null;\r\n        else if (cmp < 0) node = node.left;\r\n        else node = node.right;\r\n      }\r\n    } else {\r\n      while (node) {\r\n        cmp = compare(key, node.key);\r\n        parent = node;\r\n        if (cmp <= 0) node = node.left;\r\n        //return null;\r\n        else node = node.right;\r\n      }\r\n    }\r\n\r\n    var newNode = {\r\n      left: null,\r\n      right: null,\r\n      balanceFactor: 0,\r\n      parent,\r\n      key,\r\n      data,\r\n    };\r\n    var newRoot;\r\n    if (cmp <= 0) parent.left = newNode;\r\n    else parent.right = newNode;\r\n\r\n    while (parent) {\r\n      cmp = compare(parent.key, key);\r\n      if (cmp < 0) parent.balanceFactor -= 1;\r\n      else parent.balanceFactor += 1;\r\n\r\n      if (parent.balanceFactor === 0) break;\r\n      else if (parent.balanceFactor < -1) {\r\n        // inlined\r\n        //var newRoot = rightBalance(parent);\r\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\r\n        newRoot = rotateLeft(parent);\r\n\r\n        if (parent === this._root) this._root = newRoot;\r\n        break;\r\n      } else if (parent.balanceFactor > 1) {\r\n        // inlined\r\n        // var newRoot = leftBalance(parent);\r\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\r\n        newRoot = rotateRight(parent);\r\n\r\n        if (parent === this._root) this._root = newRoot;\r\n        break;\r\n      }\r\n      parent = parent.parent;\r\n    }\r\n\r\n    this._size++;\r\n    return newNode;\r\n  }\r\n\r\n  /**\r\n   * Removes the node from the tree. If not found, returns null.\r\n   * @param  {Key} key\r\n   * @return {?Node}\r\n   */\r\n  remove(key) {\r\n    if (!this._root) return null;\r\n\r\n    var node = this._root;\r\n    var compare = this._comparator;\r\n    var cmp = 0;\r\n\r\n    while (node) {\r\n      cmp = compare(key, node.key);\r\n      if (cmp === 0) break;\r\n      else if (cmp < 0) node = node.left;\r\n      else node = node.right;\r\n    }\r\n    if (!node) return null;\r\n\r\n    var returnValue = node.key;\r\n    var max, min;\r\n\r\n    if (node.left) {\r\n      max = node.left;\r\n\r\n      while (max.left || max.right) {\r\n        while (max.right) max = max.right;\r\n\r\n        node.key = max.key;\r\n        node.data = max.data;\r\n        if (max.left) {\r\n          node = max;\r\n          max = max.left;\r\n        }\r\n      }\r\n\r\n      node.key = max.key;\r\n      node.data = max.data;\r\n      node = max;\r\n    }\r\n\r\n    if (node.right) {\r\n      min = node.right;\r\n\r\n      while (min.left || min.right) {\r\n        while (min.left) min = min.left;\r\n\r\n        node.key = min.key;\r\n        node.data = min.data;\r\n        if (min.right) {\r\n          node = min;\r\n          min = min.right;\r\n        }\r\n      }\r\n\r\n      node.key = min.key;\r\n      node.data = min.data;\r\n      node = min;\r\n    }\r\n\r\n    var parent = node.parent;\r\n    var pp = node;\r\n    var newRoot;\r\n\r\n    while (parent) {\r\n      if (parent.left === pp) parent.balanceFactor -= 1;\r\n      else parent.balanceFactor += 1;\r\n\r\n      if (parent.balanceFactor < -1) {\r\n        // inlined\r\n        //var newRoot = rightBalance(parent);\r\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\r\n        newRoot = rotateLeft(parent);\r\n\r\n        if (parent === this._root) this._root = newRoot;\r\n        parent = newRoot;\r\n      } else if (parent.balanceFactor > 1) {\r\n        // inlined\r\n        // var newRoot = leftBalance(parent);\r\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\r\n        newRoot = rotateRight(parent);\r\n\r\n        if (parent === this._root) this._root = newRoot;\r\n        parent = newRoot;\r\n      }\r\n\r\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\r\n\r\n      pp = parent;\r\n      parent = parent.parent;\r\n    }\r\n\r\n    if (node.parent) {\r\n      if (node.parent.left === node) node.parent.left = null;\r\n      else node.parent.right = null;\r\n    }\r\n\r\n    if (node === this._root) this._root = null;\r\n\r\n    this._size--;\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Bulk-load items\r\n   * @param  {Array<Key>}  keys\r\n   * @param  {Array<Value>}  [values]\r\n   * @return {AVLTree}\r\n   */\r\n  load(keys = [], values = [], presort) {\r\n    if (this._size !== 0) throw new Error(\"bulk-load: tree is not empty\");\r\n    const size = keys.length;\r\n    if (presort) sort(keys, values, 0, size - 1, this._comparator);\r\n    this._root = loadRecursive(null, keys, values, 0, size);\r\n    markBalance(this._root);\r\n    this._size = size;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the tree is balanced\r\n   * @return {boolean}\r\n   */\r\n  isBalanced() {\r\n    return isBalanced(this._root);\r\n  }\r\n\r\n  /**\r\n   * String representation of the tree - primitive horizontal print-out\r\n   * @param  {Function(Node):string} [printNode]\r\n   * @return {string}\r\n   */\r\n  toString(printNode) {\r\n    return print(this._root, printNode);\r\n  }\r\n}\r\n\r\nAVLTree.default = AVLTree;\r\n"],"names":["const","let","this"],"mappings":"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"}